@page "/sjednani-schuzky/{Id:guid}"
@using Calendar.Users
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject MeetingService MeetingService

<PageTitle>Sjednání schůzky</PageTitle>

@if (_isUsed)
{
  <p>Tento odkaz již byl použit.</p>
}
else if (_loading)
{
  <p>Načítám data…</p>
}
else
{
  <div class="flex flex-col">
    <h1 class="mb-4 text-4xl font-extrabold tracking-tight text-gray-800 focus-visible:outline-none">
      Sjednat schůzku s @Owner.GetNameWithAbbreviatedLastName()
    </h1>

    <h2 class="text-lg text-gray-600">
      Počet schůzek v tomto měsíci: <span id="count"></span>
    </h2>
  </div>
  <div id="calendar" class="w-4/5"></div>
}

<dialog id="meetingDialog"
        class="p-6 rounded-lg fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
  <h4>Nová schůzka</h4>
  <p>Den: @_selectedDate?.ToShortDateString()</p>
  <div>
    <label class="block mb-2 font-medium">Délka schůzky:</label>
    <div class="space-x-4">
      @foreach (var duration in new[] { 30, 45, 60 })
      {
        <label class="inline-flex items-center">
          <input type="radio"
                 name="duration"
                 value="@duration"
                 @onchange="@(e => OnDurationChange(duration))"
                 class="mr-2"/>
          @(duration == 60 ? "1 hodina" : $"{duration} minut")
        </label>
      }
    </div>
  </div>

  @if (_availableSlots != null)
  {
    <div>
      <label class="block mb-2 font-medium">Dostupné časy:</label>
      <div class="space-y-2 max-h-48 overflow-y-auto">
        @foreach (var slot in _availableSlots)
        {
          <label class="block">
            <input type="radio"
                   name="timeSlot"
                   value="@slot.StartTime.ToString("HH:mm")"
                   disabled="@(!slot.IsAvailable)"
                   @onchange="@(e => OnTimeSlotSelect(slot))"
                   class="mr-2"/>
            <span class="@(!slot.IsAvailable ? "text-gray-400" : "")">
              @slot.StartTime.ToString("HH:mm")-@slot.EndTime.ToString("HH:mm")
              @(slot.Status switch
              {
                "occupied" => " (obsazeno)",
                "unavailable" => " (nedostupné)",
                _ => ""
              })
            </span>
          </label>
        }
      </div>
    </div>
  }

  @if (_selectedTimeSlot != null)
  {
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">E-mail</label>
      <input id="email"
             type="email"
             @bind-value="NewMeeting.ParticipantEmail"
             @bind-value:event="oninput"
             class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"/>
    </div>

    <div class="space-y-4">
      <div>
        <label for="firstName" class="block text-sm font-medium text-gray-700 mb-1">Jméno</label>
        <input id="firstName"
               type="text"
               @bind-value="NewMeeting.ParticipantFirstName"
               @bind-value:event="oninput"
               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"/>
      </div>

      <div>
        <label for="lastName" class="block text-sm font-medium text-gray-700 mb-1">Příjmení</label>
        <input id="lastName"
               type="text"
               @bind-value="NewMeeting.ParticipantLastName"
               @bind-value:event="oninput"
               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"/>
      </div>

      <div class="flex justify-around space-x-2 pt-4">
        <button class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors"
                @onclick="CloseDialog">
          Zrušit
        </button>
        <button
          class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          @onclick="CreateMeeting"
          disabled="@(!CanCreateMeeting())">
          Vytvořit schůzku
        </button>
      </div>
    </div>
  }
</dialog>


@code {
  [Parameter] public Guid Id { get; set; }
  private bool _isUsed;
  private bool _loading = true;
  
  private List<PrivateMeeting> _existingMeetings = new();
  private NewMeetingDto NewMeeting { get; } = new();
  private User Owner { get; set; } = null!;

  private List<TimeSlot>? _availableSlots;
  private TimeSlot? _selectedTimeSlot;
  private DateTime? _selectedDate;
  private int _selectedDurationMinutes;

  protected override async Task OnInitializedAsync()
  {
    var link = await MeetingService.GetMeetingLinkAsync(Id);
    if (link == null || link.IsUsed)
    {
      _isUsed = true;
      return;
    }

    var currentUserId = UserService.GetCurrentUserId();
    if (link.UserId == currentUserId)
    {
      NavigationManager.NavigateTo("/");
      return;
    }

    Owner = (await UserService.GetUserAsync(link.UserId))!; // Tady User urcite nebude null, muzeme pouzit !.
    _existingMeetings = await MeetingService.GetPrivateMeetingsAsync(link.UserId, DateTime.UtcNow);
    _loading = false;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!_isUsed && !_loading)
    {
      var events = _existingMeetings.Select(meeting => new { title = meeting.Title, start = meeting.ScheduledAt.ToString("yyyy-MM-dd") });
      await JS.InvokeVoidAsync("fullCalendarInterop.initCalendar", "calendar", events, GetCzechHolidays(), DotNetObjectReference.Create(this));
    }
  }

  private async Task ShowDialog() => await JS.InvokeVoidAsync("show");

  private async Task CloseDialog()
  {
    _selectedTimeSlot = null;
    _availableSlots = null;
    _selectedDurationMinutes = 0;
    await JS.InvokeVoidAsync("close");
  }

  [JSInvokable]
  public async Task OnDateClick(string dateStr)
  {
    _selectedDate = DateTime.Parse(dateStr);
    await ShowDialog();
  }


  private async Task OnDurationChange(int minutes)
  {
    _selectedDurationMinutes = minutes;
    await GenerateAvailableSlots();
  }

  private static bool IsTimeSlotOverlapping(TimeSlot slot, PrivateMeeting meeting)
  {
    return slot.StartTime < meeting.ScheduledAt.AddMinutes(meeting.DurationMinutes + 15) &&
           slot.EndTime > meeting.ScheduledAt.AddMinutes(-15);
  }

  private void OnTimeSlotSelect(TimeSlot slot) => _selectedTimeSlot = slot;

  private bool CanCreateMeeting()
  {
    return _selectedTimeSlot != null &&
           !string.IsNullOrWhiteSpace(NewMeeting.ParticipantFirstName) &&
           !string.IsNullOrWhiteSpace(NewMeeting.ParticipantLastName) &&
           !string.IsNullOrWhiteSpace(NewMeeting.ParticipantEmail);
  }

  private async Task CreateMeeting()
  {
    if (_selectedTimeSlot == null) return;

    NewMeeting.ScheduledAt = _selectedTimeSlot.StartTime;
    NewMeeting.DurationMinutes = _selectedDurationMinutes;
    NewMeeting.ParticipantFirstName = NewMeeting.ParticipantFirstName;
    NewMeeting.ParticipantLastName = NewMeeting.ParticipantLastName;
    NewMeeting.ParticipantEmail = NewMeeting.ParticipantEmail;

    await MeetingService.CreateMeetingAsync(Id, NewMeeting);
    await MeetingService.MarkLinkAsUsedAsync(Id);

    _existingMeetings.Add(new PrivateMeeting
    {
      Title = $"Vaše schůzka s {Owner.GetNameWithAbbreviatedLastName()}",
      DurationMinutes = NewMeeting.DurationMinutes,
      ScheduledAt = NewMeeting.ScheduledAt
    });

    await CloseDialog();
    await JS.InvokeVoidAsync("fullCalendarInterop.disableCalendar", "calendar");
  }

  [JSInvokable]
  public async Task OnMonthChanged(string dateStr)
  {
    var month = DateTime.Parse(dateStr).Month;
    var ownerMeetingsCountThisMonth = _existingMeetings.Count(meeting => meeting.ScheduledAt.Month == month);
    await UpdateCountDisplay(ownerMeetingsCountThisMonth);
  }

  private async Task UpdateCountDisplay(int count) => await JS.InvokeVoidAsync("updateCount", count); // Překreslovala se celá stránka, tak jsem udělal tenhle hack.

  private static List<object> GetCzechHolidays() => CzechHolidaysProvider.Get();

  private Task GenerateAvailableSlots()
  {
    if (_selectedDate == null) return Task.CompletedTask;

    var date = _selectedDate.Value;
    _availableSlots = [];

    var currentTime = new DateTime(date.Year, date.Month, date.Day, 9, 0, 0);
    var endTime = new DateTime(date.Year, date.Month, date.Day, 16, 0, 0);

    while (currentTime.AddMinutes(_selectedDurationMinutes) <= endTime)
    {
      var slot = new TimeSlot
      {
        StartTime = currentTime,
        EndTime = currentTime.AddMinutes(_selectedDurationMinutes),
        IsAvailable = true,
        Status = "available"
      };

      if (_existingMeetings.Any(meeting => IsTimeSlotOverlapping(slot, meeting)))
      {
        slot.IsAvailable = false;
        slot.Status = "occupied";
      }

      _availableSlots.Add(slot);
      currentTime = currentTime.AddMinutes(15);
    }

    StateHasChanged();
    return Task.CompletedTask;
  }

}

<script>
  function show() {
    document.getElementById('meetingDialog').showModal();
  }

  function close() {
    document.getElementById('meetingDialog').close();
  }

  function updateCount(count) {
    const countElement = document.getElementById('count');
    if (countElement) {
      countElement.textContent = count;
    }
  }

</script>

<script>
  window.fullCalendarInterop = {
    initCalendar: function (elementId, events, holidays, dotNetHelper) {
      const calendarEl = document.getElementById(elementId);
      const today = new Date();
      const twoMonthsFromNow = new Date(today);
      twoMonthsFromNow.setMonth(today.getMonth() + 2);

      const calendar = new FullCalendar.Calendar(calendarEl, {
        locale: 'cs',
        initialView: 'dayGridMonth',
        hiddenDays: [0, 6],
        selectConstraint: 'businessHours',
        validRange: {
          start: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1),
          end: twoMonthsFromNow
        },
        events: [...events, ...holidays],
        dateClick: function (info) {
          const clickedDate = new Date(info.dateStr);
          const dayEvents = calendar.getEvents().filter(event =>
            event.start.toDateString() === clickedDate.toDateString()
          );

          // Kontrola počtu schůzek v daný den
          const meetingsCount = dayEvents.filter(event => event.title === "Schůzka").length;
          if (meetingsCount >= 3) {
            return;
          }

          // Kontrola svátků
          const isHoliday = dayEvents.some(event => event.title.includes("Svátek"));
          if (isHoliday) {
            return;
          }

          dotNetHelper.invokeMethodAsync("OnDateClick", info.dateStr);
        },
        dayCellClassNames: function (arg) {
          const dayEvents = calendar.getEvents().filter(event =>
            event.start.toDateString() === arg.date.toDateString()
          );

          const meetingsCount = dayEvents.filter(event => event.title === "Schůzka").length;
          const isHoliday = dayEvents.some(event => event.title.includes("Svátek"));

          if (meetingsCount >= 3 || isHoliday) {
            return ['disabled-day'];
          }
          return [];
        },
        datesSet: function (info) {
          const viewStart = info.view.currentStart;
          dotNetHelper.invokeMethodAsync("OnMonthChanged", viewStart.toISOString());
        },

      });
      calendar.render();
      calendarEl._calendar = calendar;
    },
    disableCalendar: function (elementId) {
      const calendarEl = document.getElementById(elementId);
      if (calendarEl) {
        const overlay = document.createElement('div');
        overlay.style.position = 'absolute';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.width = '100%';
        overlay.style.height = '100%';
        overlay.style.cursor = 'not-allowed';
        overlay.style.zIndex = '1000';

        calendarEl.style.position = 'relative';
        calendarEl.appendChild(overlay);

        if (calendarEl._calendar) {
          calendarEl._calendar.setOption('dateClick', null);
        }
      }
    }

  }

</script>