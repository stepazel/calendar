@page "/sjednani-schuzky/{Id:guid}"
@using Microsoft.JSInterop
@inject IJSRuntime JS

<h3>Sjednání schůzky</h3>

@if (_isUsed)
{
  <p>Tento odkaz již byl použit.</p>
}
else if (_loading)
{
  <p>Načítám data…</p>
}
else
{
  <div id="calendar"></div>
}

@code {
  [Parameter] public Guid Id { get; set; }

  private bool _isUsed;
  private bool _loading = true;
  private List<PrivateMeeting> _existingMeetings = new();
  private NewMeetingDto _newMeeting = new();

  [Inject] MeetingService MeetingService { get; set; } = null!;

  protected override async Task OnInitializedAsync()
  {
    var link = await MeetingService.GetMeetingLinkAsync(Id);

    if (link == null || link.IsUsed)
    {
      _isUsed = true;
    }
    else
    {
      _existingMeetings = await MeetingService.GetUserMeetingsForMonthAsync(link.UserId, DateTime.UtcNow);
    }

    _loading = false;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    
    if (!_isUsed && !_loading)
    {
      var events = _existingMeetings.Select(meeting => new { title = "Schůzka", start = meeting.ScheduledAt.ToString("yyyy-MM-dd") });
      await JS.InvokeVoidAsync("fullCalendarInterop.initCalendar", "calendar", events);
    }
  }

  private async Task CreateMeeting()
  {
    await MeetingService.CreateMeetingAsync(Id, _newMeeting);
    await MeetingService.MarkLinkAsUsedAsync(Id);
  
    _existingMeetings = await MeetingService.GetUserMeetingsForMonthAsync(
      (await MeetingService.GetMeetingLinkAsync(Id))!.UserId, DateTime.UtcNow);
  }
}